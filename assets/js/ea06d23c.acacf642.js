"use strict";(self.webpackChunkaml_website=self.webpackChunkaml_website||[]).push([[8353],{3416:(e,a,t)=>{t.d(a,{Z:()=>s});var n=t(7294),l=t(1736);const i={testsUrl:"https://raw.githubusercontent.com/aml-org/examples/master/AMF4/src/test/",mainUrl:"https://raw.githubusercontent.com/aml-org/examples/master/AMF4/src/main/"},r={testsUrl:"https://raw.githubusercontent.com/aml-org/examples/master/AMF5/src/test/",mainUrl:"https://raw.githubusercontent.com/aml-org/examples/master/AMF5/src/main/",scala:"scala/scalaPlatform/",java:"java/javaPlatform/",ts:"ts/"};const s=e=>{let{AMFVersion:a,language:t,example:s,lineStart:o,lineEnd:p,hideLink:m,fromMain:c}=e;const u=(0,n.useRef)(!0),[d,h]=(0,n.useState)(""),[g,f]=(0,n.useState)(""),k=(0,n.useCallback)((async()=>{const e=function(e){return"v4"===e?i:r}(a),n=function(e,a){if(a===i)return"";switch(e){case"scala":default:return a.scala;case"java":return a.java;case"ts":return a.ts;case"js":return a.js}}(t,e),l=(c?e.mainUrl:e.testsUrl)+n+s,m=l.replace("raw.githubusercontent.com/aml-org/examples","github.com/aml-org/examples/tree"),d=await fetch(l),g=await d.text();if(!u.current)return null;if(f(m),h(g),p-o>0){let e=g.split("\n").slice(o,p).join("\n");h(e)}}),[]);return(0,n.useEffect)((()=>(k(),()=>{u.current=!1})),[]),n.createElement("div",null,n.createElement(l.Z,{className:t},d),!m&&n.createElement("p",null,"Code extracted from the examples ",n.createElement("strong",null,n.createElement("a",{href:g},"GitHub repository")),"."))}},8215:(e,a,t)=>{t.d(a,{Z:()=>l});var n=t(7294);const l=function(e){let{children:a,hidden:t,className:l}=e;return n.createElement("div",{role:"tabpanel",hidden:t,className:l},a)}},9877:(e,a,t)=>{t.d(a,{Z:()=>m});var n=t(7462),l=t(7294),i=t(2389),r=t(5773),s=t(6010);const o="tabItem_LplD";function p(e){var a,t,i;const{lazy:p,block:m,defaultValue:c,values:u,groupId:d,className:h}=e,g=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=u?u:g.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),k=(0,r.lx)(f,((e,a)=>e.value===a.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===c?c:null!=(a=null!=c?c:null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)?a:null==(i=g[0])?void 0:i.props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:N}=(0,r.UB)(),[A,w]=(0,l.useState)(b),y=[],{blockElementScrollPositionUntilNextRender:T}=(0,r.o5)();if(null!=d){const e=v[d];null!=e&&e!==A&&f.some((a=>a.value===e))&&w(e)}const x=e=>{const a=e.currentTarget,t=y.indexOf(a),n=f[t].value;n!==A&&(T(a),w(n),null!=d&&N(d,n))},M=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{const a=y.indexOf(e.currentTarget)+1;t=y[a]||y[0];break}case"ArrowLeft":{const a=y.indexOf(e.currentTarget)-1;t=y[a]||y[y.length-1];break}}null==(a=t)||a.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":m},h)},f.map((e=>{let{value:a,label:t,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:A===a?0:-1,"aria-selected":A===a,key:a,ref:e=>y.push(e),onKeyDown:M,onFocus:x,onClick:x},i,{className:(0,s.Z)("tabs__item",o,null==i?void 0:i.className,{"tabs__item--active":A===a})}),null!=t?t:a)}))),p?(0,l.cloneElement)(g.filter((e=>e.props.value===A))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},g.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==A})))))}function m(e){const a=(0,i.Z)();return l.createElement(p,(0,n.Z)({key:String(a)},e))}},6930:(e,a,t)=>{t.r(a),t.d(a,{frontMatter:()=>o,contentTitle:()=>p,metadata:()=>m,myStyle:()=>c,toc:()=>u,default:()=>h});var n=t(7462),l=(t(7294),t(3905)),i=t(9877),r=t(8215),s=t(3416);const o={id:"amf_parsing",title:"Parsing with AMF",sidebar_position:3},p=void 0,m={unversionedId:"amf/using-amf/amf_parsing",id:"amf/using-amf/amf_parsing",title:"Parsing with AMF",description:"AMF can parse AML dialects and the following API specifications:",source:"@site/docs/amf/using-amf/parsing.mdx",sourceDirName:"amf/using-amf",slug:"/amf/using-amf/amf_parsing",permalink:"/docs/amf/using-amf/amf_parsing",editUrl:"https://github.com/aml-org/a-ml/edit/develop/docs/amf/using-amf/parsing.mdx",tags:[],version:"current",lastUpdatedBy:"Tomas Fernandez",lastUpdatedAt:1645135312,formattedLastUpdatedAt:"2/17/2022",sidebarPosition:3,frontMatter:{id:"amf_parsing",title:"Parsing with AMF",sidebar_position:3},sidebar:"myAutogeneratedSidebar",previous:{title:"AMF Configuration and Client objects",permalink:"/docs/amf/using-amf/amf_configuration"},next:{title:"Transformation",permalink:"/docs/amf/using-amf/amf_transformation"}},c={padding:"15px 5px"},u=[{value:"Parsing Basics",id:"parsing-basics",children:[],level:2},{value:"How to parse APIs",id:"how-to-parse-apis",children:[],level:2},{value:"Parsing code examples",id:"parsing-code-examples",children:[{value:"API Contract Model parsing",id:"api-contract-model-parsing",children:[],level:3},{value:"AML parsing",id:"aml-parsing",children:[],level:3}],level:2}],d={myStyle:c,toc:u};function h(e){let{components:a,...o}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,o,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"AMF can parse ",(0,l.kt)("a",{parentName:"p",href:"https://aml-org.github.io/aml-spec/dialects"},"AML dialects")," and the following API specifications:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/raml-org/raml-spec/blob/master/versions/raml-08/raml-08.md"},"RAML 0.8")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md"},"RAML 1.0")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md"},"OAS 2.0")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md"},"OAS 3.0")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/asyncapi/asyncapi/blob/master/versions/2.0.0/asyncapi.md"},"AsyncAPI 2.0"))),(0,l.kt)("p",null,"The following section explains the basics of parsing, and the example shows how to parse each specification in Scala, Java or Typescript."),(0,l.kt)("h2",{id:"parsing-basics"},"Parsing Basics"),(0,l.kt)("p",null,"Parsing is the process of analyzing a sequence of tokens and then building a data structure from them."),(0,l.kt)("p",null,"AMF uses syntactic parsers such as ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aml-org/syaml"},"SYAML")," to read a JSON or YAML file and generates\nan ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree"},"abstract syntax tree")," (AST) from the file,\nwhich is later used to generate a ",(0,l.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Abstract_semantic_graph"},"semantic graph")," that represents the model.\nThis model can be either an ",(0,l.kt)("a",{parentName:"p",href:"amf_model"},"API Contract Model")," (representing an API, independent of its specification),\nor an AML Document model (a ",(0,l.kt)("inlineCode",{parentName:"p"},"Dialect"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Vocabulary"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"Dialect Instance"),")."),(0,l.kt)("p",null,"Parsing returns a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aml-org/amf/blob/develop/documentation/model.md#baseunit"},"BaseUnit")," object, which is a graph of the model.\nDepending on the content in the parsed file, the BaseUnit object can be a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aml-org/amf/blob/develop/documentation/model.md#fragment"},"Fragment"),",\na ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aml-org/amf/blob/develop/documentation/model.md#module"},"Module"),",\na ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/aml-org/amf/blob/develop/documentation/model.md#document"},"Document")," or another type."),(0,l.kt)("p",null,"The following figure shows the parsing process:"),(0,l.kt)("div",{className:"container"},(0,l.kt)("div",{className:"row"},(0,l.kt)("div",{style:c,className:"col col--6"},(0,l.kt)("p",null,(0,l.kt)("img",{alt:"parsing graph",src:t(6532).Z,width:"633",height:"788"}))),(0,l.kt)("div",{style:c,className:"col col--6"},(0,l.kt)("p",null,"A syntactic parser such as SYAML is used to generate an AST from a YAML/JSON file or a string."),(0,l.kt)("p",null,"AMF uses the AST to generate a semantic graph of the model, called ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseUnit"),".\nThis ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseUnit")," will be used in the following stages of AMF\n(",(0,l.kt)("a",{parentName:"p",href:"amf_transformation"},"transformation"),", ",(0,l.kt)("a",{parentName:"p",href:"amf_validation"},"validation"),", ",(0,l.kt)("a",{parentName:"p",href:"amf_rendering"},"rendering"),")."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"For more information about the AMF model, see the ",(0,l.kt)("a",{parentName:"p",href:"amf_model"},"AMF model documentation")," resource."))))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"We are working on incorporating ",(0,l.kt)("a",{parentName:"p",href:"https://www.antlr.org/"},"ANTLR")," to AMF to support multiple syntactic parsers."))),(0,l.kt)("h2",{id:"how-to-parse-apis"},"How to parse APIs"),(0,l.kt)("p",null,"To parse an API from the supported API specifications you need a specific or general ",(0,l.kt)("inlineCode",{parentName:"p"},"AMFConfiguration"),",\nand the ",(0,l.kt)("inlineCode",{parentName:"p"},"BaseUnitClient")," from that configuration."),(0,l.kt)("p",null,"You can use the following parsing methods:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If the API is a file use ",(0,l.kt)("inlineCode",{parentName:"li"},"client.parse(path)"),", providing the path to it"),(0,l.kt)("li",{parentName:"ul"},"If the API is a string use ",(0,l.kt)("inlineCode",{parentName:"li"},"client.parseContent(string, mediatype)")," providing the API as a string",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the mediatype is an optional parameter, if it's not present AMF will try to guess it")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Refer to the ",(0,l.kt)("a",{parentName:"p",href:"amf_configuration"},"AMF Configuration and Client objects"),"\nfor more information on how to choose the configuration and client to use.")),(0,l.kt)("h2",{id:"parsing-code-examples"},"Parsing code examples"),(0,l.kt)("p",null,"The file paths you give the parser must have the following structure:"),(0,l.kt)("p",null,"Windows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Absolute path: ",(0,l.kt)("inlineCode",{parentName:"li"},"file:///C:/testing/api.raml")),(0,l.kt)("li",{parentName:"ul"},"Relative path: ",(0,l.kt)("inlineCode",{parentName:"li"},"file://api.raml"))),(0,l.kt)("p",null,"MacOS and Unix:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Absolute path: ",(0,l.kt)("inlineCode",{parentName:"li"},"file:///Users/aml/testing/api.raml")),(0,l.kt)("li",{parentName:"ul"},"Relative path: ",(0,l.kt)("inlineCode",{parentName:"li"},"file://api.raml"))),(0,l.kt)("h3",{id:"api-contract-model-parsing"},"API Contract Model parsing"),(0,l.kt)("p",null,"The following code are examples on how to parse APIs:"),(0,l.kt)(i.Z,{groupId:"languages",defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Java",value:"java"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)(s.Z,{language:"scala",example:"ParsingTest.scala",mdxType:"CodeGetter"})),(0,l.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)(s.Z,{language:"java",example:"ParsingTest.java",mdxType:"CodeGetter"})),(0,l.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)(s.Z,{language:"ts",example:"parsing.spec.ts",mdxType:"CodeGetter"}))),(0,l.kt)("h3",{id:"aml-parsing"},"AML parsing"),(0,l.kt)("p",null,"The following code are examples on how to parse AML Vocabularies, Dialects and Dialect Instances:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Before parsing an AML Dialect Instance, you must register its Dialect in the ",(0,l.kt)("inlineCode",{parentName:"p"},"AMLConfiguration")," using its ",(0,l.kt)("inlineCode",{parentName:"p"},"withDialect(path)")," function.")),(0,l.kt)(i.Z,{groupId:"languages",defaultValue:"scala",values:[{label:"Scala",value:"scala"},{label:"Java",value:"java"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)(s.Z,{language:"scala",example:"AMLTest.scala",mdxType:"CodeGetter"})),(0,l.kt)(r.Z,{value:"java",mdxType:"TabItem"},(0,l.kt)(s.Z,{language:"java",example:"AMLTest.java",mdxType:"CodeGetter"})),(0,l.kt)(r.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)(s.Z,{language:"ts",example:"aml.spec.ts",mdxType:"CodeGetter"}))))}h.isMDXComponent=!0},6532:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/parsing-graph-ee2b1bd5e646b6ae5d13a69c230c9b98.png"}}]);