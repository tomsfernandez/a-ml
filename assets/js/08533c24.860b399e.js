"use strict";(self.webpackChunkaml_website=self.webpackChunkaml_website||[]).push([[4694],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,f=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6928:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>o,metadata:()=>s,toc:()=>l,myStyle:()=>d,default:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={id:"json_schema_draft_2019_09_to_draft_7",title:"Json Schema Draft 2019-09 to Draft 7 Emission"},o=void 0,s={unversionedId:"Related Docs/json_schema_draft_2019_09_to_draft_7",id:"version-4.x.x/Related Docs/json_schema_draft_2019_09_to_draft_7",title:"Json Schema Draft 2019-09 to Draft 7 Emission",description:"This is a technical document, this information is intended for experienced users",source:"@site/versioned_docs/version-4.x.x/Related Docs/json-schema-2019-to-draft-7.mdx",sourceDirName:"Related Docs",slug:"/Related Docs/json_schema_draft_2019_09_to_draft_7",permalink:"/docs/v4/Related Docs/json_schema_draft_2019_09_to_draft_7",editUrl:"https://github.com/aml-org/a-ml/edit/develop/versioned_docs/version-4.x.x/Related Docs/json-schema-2019-to-draft-7.mdx",tags:[],version:"4.x.x",lastUpdatedBy:"Tomas Fernandez",lastUpdatedAt:1645135312,formattedLastUpdatedAt:"2/17/2022",frontMatter:{id:"json_schema_draft_2019_09_to_draft_7",title:"Json Schema Draft 2019-09 to Draft 7 Emission"},sidebar:"version-4.x.x/myAutogeneratedSidebar",previous:{title:"Async + RAML Data Types in AMF",permalink:"/docs/v4/Related Docs/async_raml_datatypes"}},l=[{value:"Summary",id:"summary",children:[],level:4},{value:"Background",id:"background",children:[],level:4},{value:"Related aspects",id:"related-aspects",children:[{value:"Error messages",id:"error-messages",children:[],level:3},{value:"Untranslatable keywords",id:"untranslatable-keywords",children:[],level:3}],level:2},{value:"Proposed translations",id:"proposed-translations",children:[{value:"Remove <code>format</code> keyword OR turn off format validations if possible",id:"remove-format-keyword-or-turn-off-format-validations-if-possible",children:[],level:4},{value:"Change <code>$defs</code> for <code>definitions</code>",id:"change-defs-for-definitions",children:[],level:4},{value:"<code>$ref</code> keyword will be emitted as <code>allOf</code>",id:"ref-keyword-will-be-emitted-as-allof",children:[],level:4},{value:"Unify <code>dependentSchemas</code> and <code>dependentRequired</code> into <code>dependencies</code>",id:"unify-dependentschemas-and-dependentrequired-into-dependencies",children:[],level:4},{value:"Unsupported properties",id:"unsupported-properties",children:[],level:4}],level:2}],d={padding:"15px 5px"},p={toc:l,myStyle:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Technical Document")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is a technical document, this information is intended for experienced users"))),(0,r.kt)("h4",{id:"summary"},"Summary"),(0,r.kt)("p",null,"This document is an analysis of which parts of Draft 2019-09 can be emitted as Draft 7 to workaround existing lack of validation support for Draft 2019-09.\nThe validators used by AMF have no short-term plans to support this draft."),(0,r.kt)("h4",{id:"background"},"Background"),(0,r.kt)("p",null,"An initial support of Draft 2019-09 is necessary to start support of OpenAPI 3.1. This support includes parsing, emission and validation.\nThe only aspect that is not owned by AMF is validation, which is delegated to Ajv for the JS Platform and Everit for JVM."),(0,r.kt)("p",null,"These libraries won\u2019t be supporting Draft 2019-09 in the short term so we need to workaround this.\nAs we already re-emit parsed Json Schemas to validate them, we want to assess the possibility of cross-emitting Draft 2019-09 to Draft 7 to take advantage of the current supported drafts."),(0,r.kt)("h2",{id:"related-aspects"},"Related aspects"),(0,r.kt)("h3",{id:"error-messages"},"Error messages"),(0,r.kt)("p",null,"Translating Draft 2019-09 into Draft 7 will affect error messages as the schema path in the error will be different from the original. For example:"),(0,r.kt)("div",{className:"container"},(0,r.kt)("div",{className:"row"},(0,r.kt)("div",{style:d,className:"col col--6"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Draft 2019-09"',title:'"Draft','2019-09"':!0},'{\n  "$schema": "https://json-schema.org/draft/2019-09/schema",\n  "type": "object",\n  "properties": {\n    "name": { "type": "string" },\n    "credit_card": { "type": "number" },\n    "bank_number": { "type": "number"}\n  },\n  "required": ["name"],\n  "dependentSchemas": {\n    "credit_card": {\n      "properties": {\n        "billing_address": { "type": "string" }\n      },\n      "required": ["billing_address"]\n    }\n  },\n  "dependentRequired": {\n    "bank_number": ["credit_card"]\n  }\n}\n'))),(0,r.kt)("div",{style:d,className:"col col--6"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Draft 7"',title:'"Draft','7"':!0},'{\n   "$schema": "https://json-schema.org/draft/draft-07/schema",\n  "type": "object",\n  "properties": {\n    "name": { "type": "string" },\n    "credit_card": { "type": "number" },\n    "bank_number": { "type": "number"}\n  },\n  "required": ["name"],\n  "dependencies": {\n    "credit_card": {\n      "properties": {\n        "billing_address": { "type": "string" }\n      },\n      "required": ["billing_address"]\n    },\n    "bank_number": ["credit_card"]\n  }\n}\n'))))),(0,r.kt)("p",null,"These semantically equal schemas are written differently according to the draft version. They both define two dependencies,\none is a subschema and the other is a boolean array. The only difference is the error message they will produce ",(0,r.kt)("strong",{parentName:"p"},"if")," the schema path is present."),(0,r.kt)("p",null,"On validating the following example, we can see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"billing_address")," key is missing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "Someone",\n  "bank_number": 4,\n  "credit_card": 5\n}\n')),(0,r.kt)("p",null,"The schema paths of each error are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Draft 2019-09: ",(0,r.kt)("inlineCode",{parentName:"li"},"#/dependentSchemas/credit_card/required")),(0,r.kt)("li",{parentName:"ul"},"Draft 7: ",(0,r.kt)("inlineCode",{parentName:"li"},"#/dependencies/credit_card/required."))),(0,r.kt)("h3",{id:"untranslatable-keywords"},"Untranslatable keywords"),(0,r.kt)("p",null,"there are some Draft 2019-09 keywords that cannot be ported to Draft 7 as they are entirely new concepts.\nWe should decide the expected behaviour if a user tries to validate a payload against a Draft 2019-09 parsed schema. There are several options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Warning or violation when validating")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We could issue a warning or violation when we detect that a schema parsed from Draft 2019-09 is used.\nTo do this we would have to traverse the schema and detect for specific model attributes. This will add processing time to validation."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Warning or violation when parsing")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"We could emit a warning or violation when parsing. This is efficient as we only have to detect a Draft 2019-09 specific keyword, something that is necessary for parsing."),(0,r.kt)("li",{parentName:"ul"},"The downside is that the \u201cparsing module\u201d fully supports Draft 2019-09, it doesn't make sense to specify a \u201cvalidation rule\u201d on the \u201cparsing module\u201d."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Only add it to Release Notes")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The third option is to only add it in the Release Notes and nothing else. Each consumer will be able to handle it as it likes without AMF imposing specific feedback.")))),(0,r.kt)("p",null,"All the considered options have to be ",(0,r.kt)("strong",{parentName:"p"},"backward compatible"),"."),(0,r.kt)("h2",{id:"proposed-translations"},"Proposed translations"),(0,r.kt)("h4",{id:"remove-format-keyword-or-turn-off-format-validations-if-possible"},"Remove ",(0,r.kt)("inlineCode",{parentName:"h4"},"format")," keyword OR turn off format validations if possible"),(0,r.kt)("p",null,"In Draft 2019-09 format validations are turned off. We should respect this in Draft 7 and do one of two:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove ",(0,r.kt)("inlineCode",{parentName:"li"},"format")," keywords on schema emission to avoid the validation."),(0,r.kt)("li",{parentName:"ul"},"Turn off \u201cformat\u201d validations in Ajv and Everit. Ajv seems to be the only one that has it well documented.\nAnother thing to test is how the \u201cformat\u201d value is validated (if it is limited to a possible set of values by the validator)")),(0,r.kt)("h4",{id:"change-defs-for-definitions"},"Change ",(0,r.kt)("inlineCode",{parentName:"h4"},"$defs")," for ",(0,r.kt)("inlineCode",{parentName:"h4"},"definitions")),(0,r.kt)("p",null,"A really straight-forward change."),(0,r.kt)("h4",{id:"ref-keyword-will-be-emitted-as-allof"},(0,r.kt)("inlineCode",{parentName:"h4"},"$ref")," keyword will be emitted as ",(0,r.kt)("inlineCode",{parentName:"h4"},"allOf")),(0,r.kt)("p",null,"In Json Schema 2019-09 the ",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," keyword can now be alongside other keywords, but we can\u2019t lose the surrounding, same-level information (that is not taken into account when a ",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," is found).\nAccording to several parts in the Json Schema issues, the following transformation should be valid for our use case:"),(0,r.kt)("div",{className:"container"},(0,r.kt)("div",{className:"row"},(0,r.kt)("div",{style:d,className:"col col--6"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Draft 2019-09"',title:'"Draft','2019-09"':!0},'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string"\n    }\n  },\n  "$ref": "#/definitions/somewhere"\n}\n'))),(0,r.kt)("div",{style:d,className:"col col--6"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Draft 7"',title:'"Draft','7"':!0},'{\n  "type": "object",\n  "properties": {\n    "name": {\n      "type": "string"\n    }\n  },\n  "allOf": [\n    {\n      "$ref": "#/definitions/somewhere"\n    }\n  ]\n}\n'))))),(0,r.kt)("p",null,"If the schema already has an ",(0,r.kt)("inlineCode",{parentName:"p"},"allOf"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"$ref")," will simply be appended to it. An annotation will need to be added to signal that it is a top level schema."),(0,r.kt)("h4",{id:"unify-dependentschemas-and-dependentrequired-into-dependencies"},"Unify ",(0,r.kt)("inlineCode",{parentName:"h4"},"dependentSchemas")," and ",(0,r.kt)("inlineCode",{parentName:"h4"},"dependentRequired")," into ",(0,r.kt)("inlineCode",{parentName:"h4"},"dependencies")),(0,r.kt)("p",null,"These Draft 2019-09 facets should be unified in Draft 7. For example:"),(0,r.kt)("div",{className:"container"},(0,r.kt)("div",{className:"row"},(0,r.kt)("div",{style:d,className:"col col--6"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Draft 2019-09"',title:'"Draft','2019-09"':!0},'{\n  "$schema": "https://json-schema.org/draft/2019-09/schema",\n  "type": "object",\n  "properties": {\n    "name": { "type": "string" },\n    "credit_card": { "type": "number" },\n    "bank_number": { "type": "number"}\n  },\n  "required": ["name"],\n  "dependentSchemas": {\n    "credit_card": {\n      "properties": {\n        "billing_address": { "type": "string" }\n      },\n      "required": ["billing_address"]\n    }\n  },\n  "dependentRequired": {\n    "bank_number": ["credit_card"]\n  }\n}\n'))),(0,r.kt)("div",{style:d,className:"col col--6"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Draft 7"',title:'"Draft','7"':!0},'{\n  "$schema": "https://json-schema.org/draft/draft-07/schema",\n  "type": "object",\n  "properties": {\n    "name": { "type": "string" },\n    "credit_card": { "type": "number" },\n    "bank_number": { "type": "number"}\n  },\n  "required": ["name"],\n  "dependencies": {\n    "credit_card": {\n      "properties": {\n        "billing_address": { "type": "string" }\n      },\n      "required": ["billing_address"]\n    },\n    "bank_number": ["credit_card"]\n  }\n}\n'))))),(0,r.kt)("h4",{id:"unsupported-properties"},"Unsupported properties"),(0,r.kt)("p",null,"The following properties will not be translated into Draft 2019-09 as there is no possible construct in Draft 7:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"unevaluatedProperties")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"unevaluatedItems")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"minContains")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"maxContains")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contentSchema"))),(0,r.kt)("p",null,"Warnings will be added if one of the above fields exist when emitting another Draft that isn\u2019t 2019.\nThe only exception will be ",(0,r.kt)("inlineCode",{parentName:"p"},"contentSchema")," that won\u2019t be validated as the spec says it is a SHOULD."))}c.isMDXComponent=!0}}]);